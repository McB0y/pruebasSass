La instalación de sass requiere de la previa instalación de ruby,
una vez que instalado ruby, podemos ejecutar el siguiente comando:

$ sudo gem install sass

Podemos tener una shell interactiva para probar sass,
la abrimos así:

$ sass -i


Sobre las listas no sirven de mucho por si solas pero al implementar las funciones
que estan dentro de SassScript se tiene una potencia increible:

nth() --> Para obtener el n-esimo elemento de una lista
append() --> para unir muchas listas de un sola vez.
join() --> une todos los valores de la lista.
@each --> la directiva que nos ayuda a iterar en una lista.


Tenemos funciones que aplican a los mapas:

1.- map-get()
2.- map_merge() --> añade nuevos elementos clave: valor
3.- @each



Sass soporta las directivas at "@" de css y la mejora, un ejemplo de estas directivas
seria el uso de @import el cual permite la importación de otros archivos con
la extensión .sass o .scss.
Independientemente de la extension del archivo estos se mezclan en el archivo principal
donde también podemos hacer uso de las variables, mixins, placeholders, etc

@import -- espera como argumento el archivo con la extensión .sass o .scss por defecto
espera el primero.
Podemos importar varios archivos con una sola directiva como acontinuación.

@import "rounded-corners", "text-shadow";

O interpolando:

"$family: unquote("Droid+Sans");
@import url("http://fonts.googleapis.com/css?family=#{$family}");"





"Los archivos importados con reglas @import anidadas no pueden contener elementos
y directivas que sólo pueden colocarse en el primer nivel jerárquico de las
hojas de estilos, como @mixin o @charset.

Tampoco es posible anidar reglas @import dentro de los mixin y las directivas
de control."



Note: Uno de los aspectos mas importantes seria:

si utilizas @extend con la directiva @media o con otras directivas CSS,
sólo debes extender los selectores que están encerrados por esas directivas.



El siguiente ejemplo funciona correctamente:

@media print {
  .error {
    border: 1px #f00;
    background-color: #fdd;
  }
  .seriousError {
    @extend .error;
    border-width: 3px;
  }
}




Otra de las dos directivas importantes serian :

@warm --> muestra el valor de una expresió SaasScript en forma de mensaje de error
y estos mensajes de error so despegados de en la hoja de estilos para que se aprecie en
donde exactamente esta siendo generado el error.

La regla @debug ---> muestra por la consola el valor de la expresión SassScript indicada.
Se trata de una regla útil para depurar hojas de estilos muy complejas y que
utilizan expresiones SassScript muy avanzadas. Ejemplo:

1.- @debug 10em + 12em; --> //la salida sera : Line 1 DEBUG: 22em




@at-root --> La utilizamos para aprovechar el scope teniendo un bloque
anidado pero en el .css se transpilaria a un bloque independiente, por ejemplo:




@mixin widget($padding,$header-font,$header-color){
  display: block;
  padding: $padding;
  @at-root{
    header#{&}  {
      font-family: $header-font;
      color: $header-color;
    }
  }
}
.widget {
  @include widget(1em,Arial,blue);
}



Teniendo la siguiente salida:

.widget {
  display: block;
  padding: 1em;
}


header.widget {
  font-family: Arial;
  color: blue;
}



Las directivas de control son bastante sencillas en realidad.

Tenemos las siguientes:

1.-función if() --> solamente evalúa el argumento que corresponde al valor que va a devolver.

2.-directiva @if --> evalúa una expresión SassScript y solamente incluye los estilos definidos
en su interior, puede ser seguida de una o más directivas "@else if".

3.-La directiva @for --> iterara sobre algun elemento y regresara el valor, su sintaxis es:

@for $var from <inicio> to <final>, inicio y inal deben de ser enteros. Por ejemplo:

$lista : "uno", "dos", "tres", "cuatro", "cinco";

@mixin itera(){
  @for $var from 1 to length($lista){
    value : $var;
  }
  @content
}

.menu{
  @include itera;
}




4.-La directiva @each --> Otra forma de iterar similar al ciclo for. También puede pasarse
mas de una variable al ciclo @each $var1, $var2, ... in <lista>.
Si <lista> es una lista formada por listas, a cada variable se le asigna un elemento de
cada sublista. Ejemplo:

@each $animal, $color, $cursor in (puma, black, default), --->La salida de la primera iteración.
                                  (sea-slug, blue, pointer), --->La salida de la segunda iteración.
                                  (egret, white, move) { --->La salida de la tercera iteración.
  .#{$animal}-icon {
    background-image: url('/images/#{$animal}.png');
    border: 2px solid $color;
    cursor: $cursor;
  }
}

NOTE: Como los mapas se consideran listas formadas por pares clave: valor,
también en este caso se puede utilizar la asignación múltiple. Ejemplo:

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
  #{$header} {
    font-size: $size;
  }
}
Dando como salida lo siguiente:

h1 {
  font-size: 2em;
}
h2 {
  font-size: 1.5em;
}
h3 {
  font-size: 1.2em;
}


La última de las directivas de control es : @while puede dar mejores resultados que
si se programara con la directiva @for, por ejemplo:

$i: 6;
@while $i > 0 {
  .item-#{$i} { width: 2em * $i; }
  $i: $i - 2;
}





NOTA:

Las directivas de control son una característica
muy avanzada que rara vez se utiliza directamente
en las hojas de estilos. Sin embargo, son muy
útiles para definir mixins y otras características
avanzadas de librerías como Compass.



Mixins: Se definen baja la directiva @mixin y es opcional el uso o no de argumentos
tal cual una función "()".

Los mixins pueden tener sectores haciendo referencia al padre por medio del operador
"&" como en el siguiente ejemplo:

@mixin clearfix {
  display: inline-block;
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden;
  }
  * html & { height: 1px }
}

podemos llamar al mixin directamente sin un anidamiento ya que esto daria un error e.g.

@mixin silly-links {
  a {
    color: blue;
    background-color: red;
  }
}

@include silly-links;


-En su interior también puede haber otros mixins por ejemplo:


@mixin compound {
  @include highlighted-background;
  @include header-text;
}

@mixin highlighted-background { background-color: #fc0; }
@mixin header-text { font-size: 20px; }

-Se pueden especificar parámetros por defecto.
-También se pueden pasar parámetros variables con la notación (...),
lo cual resulta bastante útil por ejemplo para una sombra.

También es posible pasar una lista de argumentos y un mapa siempre que la
lista se pase primero, como por ejemplo: @include colors($values..., $map...).


"Algo super curioso es que también se le puede pasar un bloque de código
como el caso d eacontinuación en el que se le pasa una linea definiendo un color
y esta se cambia en el mixin por la instrucción @include."

$color: white;
@mixin colors($color: blue) {
  background-color: $color;
  @content;
  border-color: $color;
}
.colors {
  @include colors { color: $color; }
}



















Referencia de estas notas: librosweb

// NOTE: Nuestros tipos de datos son los siguientes 7, estos
//tienen algunas variantes bastante peculiares.


$numero : 200px;//No importa si tiene unidades es reconocido como un número.
//hay que tener cuidado pues podriamos confundir con una cadena.

$cadena : sinComillas;//si no lleva comillas entonces tampoco deberia de ser más de una palabra,
//si lleva comillas es considerado como una cadena tal cual otro lenguaje.

$color : red;//COlores validos en css, pude pasarse otro tipo de formato como el HEX o RGBA.

$booleana : true;//o también expresiones que se puedan evaluar como verdadero o falso. 5<10

$nulo : null; //regresa el valor null.

$lista: Esta es, una lista, de tres elementos;//Podriamos saber también varias caracteristicas
//de nuestra de nuestra lista como longitud, y que valor tiene determinado elemento.

/*
1.-length
2.-nth($nombreLista, number) e.g.--> first-value:nth($lista, numero)
"nos devuelve un elemento de la lista en la posicion especificada".
*/


$mapa:(
primerValor: red,
segundoValor: black,
tercerValor: green,
cuartoValor: yellow,
quintoVAlor: white
);


/*
type-of($mapa);
Podemos obtener el valor especifico de uno de los elementos que se tienen en el mapa,
con la función map-get($mapa, elemento), que recibe mapa y elemento.
e.g
.fuente1{
color: map-get($mapa,primerValor);
}
map-get($networks-colors,twitter)
*/





/*****************Operaciones***********************/

// NOTE: Se siente como programar al ya que podemos llevar a cabo:
// operaciones, ciclos, calidaciones, etc. Para esto tenemos a la mano operaciones
//fundamentales que existen en los otros lenguajes de programación.



$a: 5px;
$b: null;
$c: "Soy una cadena";
$d: true;
$e: tomato;
$f: elemento1, elemento2, elemento3;
$features:(
    lenguaje: ruby,
    extension: scss,
    salida : css,
    herramienta: workflow
     );


//Vamos a realizar algunas operaciones con las siguientes variables.

//sass es lo suficientemente listo como para saber cuando se tienen que llevar
//acabo una operacion aritmética.

.aritmeticas{
  suma: $a+20;
  resta: ($a)-20;
  division: $a/20;
  multiplicacion: $a*10;
}

//Podemos hacer condicionales.


.logicos{
  value : $a > 7px;//false
  @if ($a or $b) and (length($f) == 3){
    value: ambas tienen un valor;
  }
  @else{
  value: ninguna tiene valor;
  }
}

.condicionales{
  @if type-of($c) == string  and length($c)==1{
    //la función length() va mejor con listas.
  value : verdadero;
  }
  @else{
    value: falso;
  }
}


//Tomando los valores de una lista.
.valores{
  $caracteristica: map-get($features,lenguaje);
  value: $caracteristica;
}





/******************Interpolemos algunas variables*************/

$rsociales:(
 red1: face,
 red2: twitter,
 red3 : google,
 red4 : github
 );

 $val1 : map-get($rsociales, red1);


//la primera variable del ciclo es la key del mapa y la segunda el value.

 @each $val, $red in $rsociales {
 //Cremos un menu con iteraciones para cada objeto de nuestro mapa.
 .menu-#{$val}{
 color:$red;
   }
 }
